#include <ros/package.h>
#include <std_msgs/Int8.h>
#include "hero_msgs/hero_agent_cont.h"
#include "hero_msgs/hero_agent_state.h"
#include "ros/ros.h" // ROS Default Header File
#include "ros_opencv/hero_opencv.h"
#include "darknet_ros_msgs/BoundingBox.h"

#include <stdio.h>
#include <iostream>
#include <string>

using namespace std;

float Depth = 0;
float Roll = 0;
float Pitch = 0;
float Yaw = 0;
float Pressure = 0;
float Temperature = 0;

int ID_data = 0;
float Distance = 0;
float Tran[3] = {
    0,
};
float Rotat[3] = {
    0,
};
int Gripper = 0;

int Yolo_x = 0;
int Yolo_y = 0;
int Yolo_Detector = 0;

float yaw_p = 0, yaw_i = 0, yaw_d = 0;
float depth_p = 0, depth_i = 0, depth_d = 0;
float target_yaw = 1, target_depth = 0;
int yaw_con_on = 0, depth_con_on = 0;
int control_minimum = 100;

int position_con_on = 0;
float target_position = 0;
float position_p = 0;

int case00 = 0;
int yolo_count = 0;
void msgCallback_state(const hero_msgs::hero_agent_state::ConstPtr &msg)
{
    Depth = msg->Depth;
    Roll = msg->Roll;
    Pitch = msg->Pitch;
    Yaw = msg->Yaw;
    Pressure = msg->Pressure;
    Temperature = msg->Temperature;

    //ROS_INFO("Depth msg = %f", msg->Depth);       // Prints the 'stamp.sec' message
    //ROS_INFO("Roll msg = %f", msg->Roll);         // Prints the 'stamp.nsec' message
    //ROS_INFO("Pitch msg = %f", msg->Pitch);       // Prints the 'data' message
    //ROS_INFO("Yaw msg = %f", msg->Yaw);           // Prints the 'data' message
    //ROS_INFO("Pressure msg = %f", msg->Pressure); // Prints the 'data' message
    //ROS_INFO("Temperature msg = %f",
    //         msg->Temperature); // Prints the 'data' message
}

void msgCallback_opencv(const ros_opencv::hero_opencv::ConstPtr &msg)
{
    ID_data = msg->ID;
    Distance = msg->DISTANCE;
    Tran[0] = msg->TRAN[0];
    Tran[1] = msg->TRAN[1];
    Tran[2] = msg->TRAN[2];
    Rotat[0] = msg->ROTA[0];
    Rotat[1] = msg->ROTA[1];
    Rotat[2] = msg->ROTA[2];
    Gripper = msg->GRIPPER;
    /*
    ROS_INFO("ID msg = %d", msg->ID); // Prints the 'stamp.sec' message
    ROS_INFO("DISTANCE msg = %f",
             msg->DISTANCE); // Prints the 'stamp.nsec' message
    ROS_INFO("Tran msg = [%f %f %f]", msg->TRAN[0], msg->TRAN[1],
             msg->TRAN[2]); // Prints the 'data' message
    ROS_INFO("Rotat msg = [%f %f %f]", msg->ROTA[0], msg->ROTA[1],
             msg->ROTA[2]); // Prints the 'data' message
             */
}

void msgCallback_yolo(const darknet_ros_msgs::BoundingBox::ConstPtr &msg)
{
    if (msg->xmin == -1)
    {
        Yolo_Detector = 0;
    }
    else
    {
        Yolo_Detector = 1;
        Yolo_x = (msg->xmin + msg->xmax) / 2;
        Yolo_y = (msg->ymin + msg->ymax) / 2;
        //ROS_INFO("YOLO Detected X = %d, Y = %d", Yolo_x, Yolo_y); // Prints the 'stamp.sec' message
    }
}

int main(int argc, char **argv) // Node Main Function
{
    cout << "Start!" << endl;
    int count = 0;

    ros::init(argc, argv, "agent_main"); // Initializes Node Name
    ros::NodeHandle
        nh;                   // Node handle declaration for communication with ROS system
    ros::Rate loop_rate(100); // Hz

    ros::Subscriber sub_ros_opencv =
        nh.subscribe("/ros_opencv_msg", 100, msgCallback_opencv);

    ros::Subscriber sub_state =
        nh.subscribe("/hero_agent/state", 100, msgCallback_state);

    ros::Subscriber sub_yolo =
        nh.subscribe("/darknet_ros/bounding_box", 100, msgCallback_yolo);

    ros::Publisher pub_yaw_cont =
        nh.advertise<hero_msgs::hero_agent_cont>("/hero_agent/yaw_cont", 100);
    ros::Publisher pub_depth_cont =
        nh.advertise<hero_msgs::hero_agent_cont>("/hero_agent/depth_cont", 100);

    ros::Publisher pub_position_cont =
        nh.advertise<hero_msgs::hero_agent_cont>("/hero_agent/position_cont", 100);

    ros::Publisher pub_command =
        nh.advertise<std_msgs::Int8>("/hero_agent/command", 100);

    hero_msgs::hero_agent_cont yaw_cont_msg;
    hero_msgs::hero_agent_cont depth_cont_msg;
    hero_msgs::hero_agent_cont position_cont_msg;
    std_msgs::Int8 command_msg;

    float degree = 0;

    char pc_input;

    // 시리얼 포트를 연다
    // 시리얼포트를 1초동안 대기하거나 32바이트 이상의 데이타가 들어오면
    // 깨어나도록 설정한다.
    

    cout << "relay off !" << endl;
    command_msg.data = 2;
    pub_command.publish(command_msg);
    sleep(1);
    cout << "cont init !" << endl;
    yaw_cont_msg.Cont_on = 0;
    yaw_cont_msg.Target_value = target_yaw;
    pub_yaw_cont.publish(yaw_cont_msg);

    depth_cont_msg.Cont_on = 0;
    depth_cont_msg.Target_value = 0;
    pub_depth_cont.publish(depth_cont_msg);
    sleep(1);

    cout << "set target yaw!" << endl;
    command_msg.data = 8;
    pub_command.publish(command_msg);
    sleep(1);

    cout << "relay on !" << endl;
    command_msg.data = 1;
    pub_command.publish(command_msg);
    sleep(6);
 cout << "set gripper!" << endl;
    command_msg.data = 5;
    pub_command.publish(command_msg);
    sleep(3);

    cout << "real Start!" << endl;
    while (ros::ok())
    {
        if (case00 == 0)
        {
            target_yaw = 0;
            yaw_cont_msg.Cont_on = 1;
            yaw_cont_msg.Target_value = target_yaw;
            pub_yaw_cont.publish(yaw_cont_msg);

            depth_cont_msg.Cont_on = 0;
            depth_cont_msg.Target_value = 3;
            pub_depth_cont.publish(depth_cont_msg);

            while (1)
            {
                cout<<"case0"<<"target_yaw"<<target_yaw<<"Yaw"<<Yaw<<endl;

                if (Yaw - target_yaw < 0.2 && Yaw - target_yaw > -0.2)
                {
                    position_cont_msg.Cont_on = 1;
                    pub_position_cont.publish(position_cont_msg);
                }
                else
                {
                    position_cont_msg.Cont_on = 0;
                    pub_position_cont.publish(position_cont_msg);
                }

                if (Yolo_Detector == 1)
                {
                    yolo_count++;

                    if (yolo_count > 5)
                    {
                        case00 = 1;
                        break;
                    }
                }
                else
                {
                    yolo_count = 0;
                }
                loop_rate.sleep();
                ros::spinOnce();
            }
        }
        else if (case00 == 1)
        {
            //depth_cont_msg.Cont_on = 1;
            //depth_cont_msg.Target_value = 3;
            //pub_depth_cont.publish(depth_cont_msg);

            while (1)
            {
                int cccont = 0;
                 
                if (Yolo_x < 320 && Yolo_y < 240)
                {
                    if (320 - Yolo_x > 240 - Yolo_y)
                    {
                        cccont = 14;
                        position_cont_msg.Cont_on = 4;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                       
                    }
                    else
                    {
                        cccont = 11;
                        position_cont_msg.Cont_on = 1;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x > 320 && Yolo_y > 240)
                {
                    if (Yolo_x - 320 > Yolo_y - 240)
                    {
                        cccont = 22;
                        position_cont_msg.Cont_on = 2;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        cccont = 23;
                        position_cont_msg.Cont_on = 3;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x < 320 && Yolo_y > 240)
                {
                    if (320 - Yolo_x> Yolo_y - 240)
                    {
                        cccont = 34;
                        position_cont_msg.Cont_on = 4;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        cccont = 33;
                        position_cont_msg.Cont_on = 3;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x > 320 && Yolo_y < 240)
                {
                    if (Yolo_x - 320 > 240 - Yolo_y)
                    {
                        cccont = 42;
                        position_cont_msg.Cont_on = 2;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        cccont = 41;
                        position_cont_msg.Cont_on = 1;
                        pub_position_cont.publish(position_cont_msg);
                        sleep(1);
                        position_cont_msg.Cont_on = 0;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                
cout<<"case1"<<"Yolo_x"<<Yolo_x<<"Yolo_y"<<Yolo_y<<"cont"<<cccont<<endl;
                if (Yolo_x-320>-40&&Yolo_x-320<40&&Yolo_y-240>-40&&Yolo_y-240<40)
                {
                    
                    position_cont_msg.Cont_on = 0;
                    pub_position_cont.publish(position_cont_msg);
                    sleep(3);
                    case00 = 2;
                    break;
                }
                loop_rate.sleep();
                ros::spinOnce();
            }
        }
        else if (case00 == 2)
        {
            depth_cont_msg.Cont_on = 1;
            depth_cont_msg.Target_value = 3;
            pub_depth_cont.publish(depth_cont_msg);

            while (1)
            {
                cout<<"case2"<<"Yolo_x"<<Yolo_x<<"Yolo_y"<<Yolo_y<<endl;
                if (Yolo_x < 320 && Yolo_y < 240)
                {
                    if (320 - Yolo_x > 240 - Yolo_y)
                    {
                        position_cont_msg.Cont_on = 4;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        position_cont_msg.Cont_on = 1;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x > 320 && Yolo_y > 240)
                {
                    if (Yolo_x - 320 > Yolo_y - 240)
                    {
                        position_cont_msg.Cont_on = 2;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        position_cont_msg.Cont_on = 3;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x < 320 && Yolo_y > 240)
                {
                    if (320 - Yolo_x> Yolo_y - 240)
                    {
                        position_cont_msg.Cont_on = 4;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        position_cont_msg.Cont_on = 3;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }
                else if (Yolo_x > 320 && Yolo_y < 240)
                {
                    if (Yolo_x - 320 > 240 - Yolo_y)
                    {
                        position_cont_msg.Cont_on = 2;
                        pub_position_cont.publish(position_cont_msg);
                    }
                    else
                    {
                        position_cont_msg.Cont_on = 1;
                        pub_position_cont.publish(position_cont_msg);
                    }
                }

                if (Depth>1)
                {
                    sleep(3);
                    position_cont_msg.Cont_on = 0;
                    pub_position_cont.publish(position_cont_msg);
                    case00 = 3;
                    break;
                }
                loop_rate.sleep();
                ros::spinOnce();
            }
        }
        else if (case00 == 3)
        {
            cout<<"case3"<<"Yolo_x"<<Yolo_x<<"Yolo_y"<<Yolo_y<<endl;
            yaw_cont_msg.Cont_on = 1;
            yaw_cont_msg.Target_value = target_yaw;
            pub_yaw_cont.publish(yaw_cont_msg);

            depth_cont_msg.Cont_on = 1;
            depth_cont_msg.Target_value = 3;
            pub_depth_cont.publish(depth_cont_msg);

            while (1)
            {
                command_msg.data = 7;
                pub_command.publish(command_msg);
                sleep(5);
                loop_rate.sleep();
                ros::spinOnce();
                case00 = 4;
                break;
            }
        }
        else if (case00 == 4)
        {
            cout<<"case4"<<"Yolo_x"<<Yolo_x<<"Yolo_y"<<Yolo_y<<endl;
            yaw_cont_msg.Cont_on = 1;
            yaw_cont_msg.Target_value = target_yaw;
            pub_yaw_cont.publish(yaw_cont_msg);

            depth_cont_msg.Cont_on = 1;
            depth_cont_msg.Target_value = 0;
            pub_depth_cont.publish(depth_cont_msg);

            while (1)
            {
               
                loop_rate.sleep();
                ros::spinOnce();
                case00 = 5;
                break;
            }
        }

        loop_rate.sleep();
        ros::spinOnce();
    }
    ros::spin(); // Increase count variable by one
    return 0;
}
